<?php

namespace OC\WestoryBundle\Repository;

use OC\WestoryBundle\Entity\Members;
use OC\WestoryBundle\Entity\Story;
/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository{

	public function getPosts($user){
		return $this->findBy(
						array('author' 	=> $user),
						array('postDate' => 'desc')
			);
	}

	public function getSelectedPosts($user, Story $story, $validated){
		$query = $this->createQueryBuilder('p')
			->where('p.author = :user')
				->setParameter('user', $user)
			->andWhere('p.story = :story')
				->setParameter('story', $story)
			->andWhere('p.validated = :validated')
				->setParameter('validated', $validated)
			->orderBy('p.postDate', 'DESC')
			->getQuery()
			->getResult()
		;

		return $query;
	}

	public function getValidatedPosts(Story $story, $validated){
		$query = $this->createQueryBuilder('p')
			->where('p.story = :story')
				->setParameter('story', $story)
			->andWhere('p.validated = :validated')
				->setParameter('validated', $validated)
			->getQuery()
			->getResult()
		;

		return $query;
	}

	public function getCurrentPosts(Story $story, $chapter){
		$query = $this->createQueryBuilder('p')
			->where('p.story = :story')
				->setParameter('story', $story)
			->andWhere('p.chapter = :chapter')
				->setParameter('chapter', $chapter)
			->getQuery()
			->getResult()
		;

		return $query;
	}

	public function insertPost($post, $story, $user, $chapter){
		$post->setAuthor($user->getUsername());
		$post->setStory($story);
		$post->setChapter($chapter);
		$this->getEntityManager()->persist($post);
		$this->getEntityManager()->flush();
	}

	public function getMostVoted($story, $currentChapter){
		$query = $this->createQueryBuilder('p')
			->where('p.story = :story')
				->setParameter('story', $story)
			->andWhere('p.chapter = :chapter')
				->setParameter('chapter', $currentChapter)
			->having('p.reports < 10')
			->orderBy('p.voteNumber', 'DESC')
			->setMaxResults(1)
			->getQuery()
			->getOneOrNullResult()
		;

		return $query;
	}

	public function orderChapter($user, Story $story, $valid){
		$query = $this->createQueryBuilder('p')
			->where('p.author = :author')
				->setParameter('author', $user)
			->andWhere('p.story = :story')
				->setParameter('story', $story)
			->andWhere('p.validated = :valid')
				->setParameter('valid', $valid)
			->getQuery()
			->getArrayResult()
		;

		return $query;
	}

}
