<?php

namespace OC\WestoryBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * StoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoryRepository extends \Doctrine\ORM\EntityRepository{

	public function getUserStories($user, $page, $storiesPerPage){
		$query = $this->createQueryBuilder('s')
			->where('s.author = :user')
			->setParameter('user', $user)
			->orderBy('s.creationDate', 'DESC')
			->getQuery()
			;
		$query
	      	->setFirstResult(($page-1) * $storiesPerPage)
	      	->setMaxResults($storiesPerPage)
	    ;
	    return new Paginator($query, true);
	}

	public function insertStory($story, $user){
		$story->setAuthor($user->getUsername());
		$this->getEntityManager()->persist($story);
		$this->getEntityManager()->flush();
	}

	public function getStoriesFinished($page, $storiesPerPage){
		$query = $this->createQueryBuilder('s')
			->having('s.postNumber = s.postLimit')
			->getQuery()
			;
		$query
	      ->setFirstResult(($page-1) * $storiesPerPage)
	      ->setMaxResults($storiesPerPage)
	    ;
	    return new Paginator($query, true);
	}

	public function getCurrentStories($page, $storiesPerPage){
		$query = $this->createQueryBuilder('s')
			->having('s.postNumber < s.postLimit')
			->getQuery()
			;
		$query
	      ->setFirstResult(($page-1) * $storiesPerPage)
	      ->setMaxResults($storiesPerPage)
	    ;
	    return new Paginator($query, true);
	}

	public function getStoriesInProgress(){
		$query = $this->createQueryBuilder('s')
			->having('s.postNumber < s.postLimit')
			->getQuery()
			;
		return $query->getResult();
	}

	public function isSpam($user){
		$date = date('Y/m/d');
		$query = $this->createQueryBuilder('s')
			->where('s.author = :user')
				->setParameter('user', $user)
			->andWhere('DATE_FORMAT(s.creationDate, \'%Y/%m/%d\') = :date')
				->setParameter('date', $date)
			->orderBy('s.creationDate', 'DESC')
			->setMaxResults(1)
			->getQuery()
			->getOneOrNullResult()
		;
		return $query;
	}
}